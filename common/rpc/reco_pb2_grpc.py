# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

# 独立客户端运行的导包方式
# import reco_pb2 as reco__pb2
# 修复无法上传
# flask客户端运行的导包方式
from rpc import reco_pb2 as reco__pb2


class UserArticleRecommendStub(object):
    """需求：web后端需要调用推荐系统中的方法，获取推荐文章数据
    使用：user_recommend(UserRequest()) ====> 返回ArticleResponse  ====> 推荐文章数据

    定义服务---类似于python中的类
    """

    def __init__(self, channel):
        """Constructor.

        构建UserArticleRecommendStub对象--stub助手
        Args:
          channel: A grpc.Channel.具体连接服务器的ip和端口生成的频道对象
        """
        self.user_recommend = channel.unary_unary(
            '/UserArticleRecommend/user_recommend',
            request_serializer=reco__pb2.UserRequest.SerializeToString,
            response_deserializer=reco__pb2.ArticleResponse.FromString,
        )


class UserArticleRecommendServicer(object):
    """需求：web后端需要调用推荐系统中的方法，获取推荐文章数据
    使用：user_recommend(UserRequest()) ====> 返回ArticleResponse  ====> 推荐文章数据

    定义服务---类似于python中的类

    UserArticleRecommendServicer().user_recommend
    决定具体要推送何种类型数据
    """

    def user_recommend(self, request, context):
        """
        定义具体推荐的函数
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_UserArticleRecommendServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'user_recommend': grpc.unary_unary_rpc_method_handler(
            servicer.user_recommend,
            request_deserializer=reco__pb2.UserRequest.FromString,
            response_serializer=reco__pb2.ArticleResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'UserArticleRecommend', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
